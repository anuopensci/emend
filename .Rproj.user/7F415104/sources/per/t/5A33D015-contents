---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# emend

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
<!-- badges: end -->

Save time and effort by using emend to clean and standardise your data. The emend package is your artificial intelligence (AI) assistant that contain a collection of functions to help you with your data cleaning tasks.

WARNING: validate that the method works for your own data context. 

The default setting has been set so that the results are reproducible and less prone to "creativity", as desired for data processing. The reproducibility is achieved within the same system (i.e. computer) only and not necessarily across different systems.

## Installation

### Large Language Model

You will also need to set up a large language model (LLM), either by downloading a local LLM via Ollama or API access. To do this see [`vignette("setup-LLM", package = "emend")`](https://emitanaka.org/emend/articles/setup-LLM.html).

### Package

You can install the development version of emend like below:

```{r}
# install.packages("pak")
pak::pak("emitanaka/emend")
```

## Examples

```{r}
library(emend)
```

### Specifying the LLM

Before using any functions in `emend`, you need to set up a "Chat" object which is from the package `ellmer`, then use this "Chat" object as an input argument for functions in `emend`. 

__If you have set up a local LLM using Ollama:__

You could run the below code to set up your `Chat` object. Our function is tested with the LLM `llama3.1:8b` and with a seed of 0, so these will be the preferred parameters. 

```{r}
chat <- ellmer::chat_ollama(model = "llama3.1:8b", seed = 0, echo = "none") 
```

__If you want to use LLM via provider APIs:__ Follow the instructions on the `ellmer` [website](https://ellmer.tidyverse.org/) to set up the API keys and create a desired `Chat` object. 

### Categorise text

Some categorical variables can have simple typos or alternative representations. For example below we have "UK" written also as "United Kingdom". 

```{r}
messy$country
```

While you can manually fix this, again, this can be tedious. We can map this automatically using `emend_fct_match()`. 

```{r}
emend_fct_match(messy$country, levels = c("UK", "USA", "Canada", "Australia", "NZ"), chat = chat)
```

The function actually works to match a continent as well! Let's use `emend_lvl_match()` to more easily see the conversion on the levels alone.

```{r}
emend_lvl_match(messy$country, levels = c("Asia", "Europe", "North America", "Oceania", "South America"), chat = chat)
```

The above process required specification of all the levels but sometimes you may not know ahead all of the levels. The `emend_get_levels()` function will attempt to clean up the levels. 

```{r}
levels <- emend_get_levels(messy$country, chat = chat)
print(levels)
```
Then you can use the cleaned levels to map the messy data to the correct levels.

```{r}
emend_fct_match(messy$country, levels = levels, chat = chat)
```

### Correcting order of levels for ordinal variables

The levels of categorical variables by default are ordered alphabetically. This can be problematic when the levels have a natural order.

```{r}
factor(likerts$likert1)
```

A correct order may need to be manually specified like below, but it can be a tedious task.

```{r}
factor(likerts$likert1, 
       levels = c("Strongly Disagree", "Disagree", "Somewhat Disagree", "Neutral", "Somewhat Agree", "Agree", "Strongly Agree")) 
```

The `emend_fct_reorder()` function will try to reorder the levels of the factor in a meaningful way _automatically_ using a large language model. 

```{r}
emend_fct_reorder(likerts$likert1, chat = chat) |> levels()
```

### Translate

The `emend_translate()` function can be used to translate text to another language (default English). The text can be a mix of different languages.

```{r}
text <- c("猿も木から落ちる", "你好", "bon appetit")
emend_translate(text, chat = chat)
```

You can also try to identify the language in the text. 

```{r}
emend_what_language(text, chat = chat)
```

## Dates

When combining data from different sources, inconsistencies in date formats can occur frequently. Reformatting dates to a single format using traditional programming requires listing all possible date formats and can be time-consuming. The `emend_clean_date()` function uses an LLM to standardise the dates to the international standard "YYYY-MM-DD".

```{r}
x <- c("16/02/1997", "20 November 2024", "24 Mar 2022", "2000-01-01", "Jason", "Dec 25, 2030", "12/05/2024")
emend_clean_date(x, chat = chat)
```

By default, the function interprets dates in the format "XX/XX/YYYY" as the European style "DD/MM/YYYY". If the dates are in the US style "MM/DD/YYYY", you can specify the input date format using the `input_format` option. 

```{r}
x <- c("12/25/2024", "Nov 15, 2024", "02/25/2024")
emend_clean_date(x, input_format = "MM/DD/YYYY", chat = chat)
```

## Addresses 

When scraping data from websites or APIs, especially property-related information, addresses can present challenges. The `emend_clean_address()` function uses an LLM to standardise addresses into a consistent format and returns an empty value for items that are not addresses. 

```{r}
x <- c("68/150 Acton Road, Acton ACT 2601",
       "655 Jackson St, Dickson ACT 2602",
       "Unit 60 523 Joey Cct, Layton NSW 6500",
       "23/100 de burgh road, Southbank VIC 7800",
       "91 Sullivan pl, Sydney nsw 6600",
       "i don't know the address")
emend_clean_address(x, chat = chat)
```

## Related packages 

- `air`
- `askgpt`
- `chatgpt`
- `ellmer`
- `gptchatteR`
- `gptstudio`
- `gpttools`
- `TheOpenAIR`
- `tidychatmodels`
